{"cells":[{"cell_type":"markdown","execution_count":0,"metadata":{"collapsed":false,"continued":true,"lineCount":3},"source":"This supply can be used to represent a graph as an [adjacency matrix](https://en.wikipedia.org/wiki/Adjacency_matrix), and manipulate the weights of each edge. \n\nEdges are referenced by a string name provided by the user. **They must be unique (code will error if they are not).**","outputs":[]},{"cell_type":"code","execution_count":5,"metadata":{"collapsed":true,"continued":true,"lineCount":12},"source":"var supply = require('@dms/io');\nvar matrixPrinter = function (matrix) {\n  for (var i in matrix) {\n    var outputString = '';\n    \n    for (var j in matrix[i]) {\n      outputString += matrix[i][j];\n      outputString += ' '; \n    }\n    console.log(outputString) \n  }\n};","outputs":[]},{"cell_type":"code","execution_count":5,"metadata":{"collapsed":false,"continued":true,"lineCount":61},"source":"// create and initialize matrix\nvar adjacencyMatrix = supply('adjacency-matrix', {\n    parameters: {\n        nodeNames: ['A', 'B', 'C', 'D']\n    }\n});\n\nadjacencyMatrix.$on('initialize');\n\n// add some edges \nadjacencyMatrix({\n    from: 'A',\n    to: 'B',\n    value: 1\n});\n\nadjacencyMatrix({\n    from: 'B',\n    to: 'C',\n    value: 2\n});\n\nadjacencyMatrix({\n    from: 'C',\n    to: 'B',\n    value: 3\n});\n\nconsole.log('Adding elements to matrix');\nmatrixPrinter(adjacencyMatrix.$on('getMatrix').adjMatrix);\n\n// increment some edges \nadjacencyMatrix.$on('incrementEdge', {\n    from: 'A',\n    to: 'B',\n    value: 1\n});\nadjacencyMatrix.$on('incrementEdge', {\n    from: 'B',\n    to: 'C'\n});\n\nconsole.log('Increment values of some edges');\nmatrixPrinter(adjacencyMatrix.$on('getMatrix').adjMatrix);\n\n// decrement some edges\nadjacencyMatrix.$on('decrementEdge', {\n    from: 'A',\n    to: 'B',\n    value: 1\n});\nadjacencyMatrix.$on('decrementEdge', {\n    from: 'B',\n    to: 'C'\n});\n\nconsole.log('Decrement values of some edges');\nmatrixPrinter(adjacencyMatrix.$on('getMatrix').adjMatrix);\n\n// get value of an edge\nconsole.log('Value of edge from A --> B: ' + adjacencyMatrix.$on('getWeightFor', {'from': 'A', 'to': 'B'}));","outputs":[{"output_type":"execute_result","data":{"application/json":["Adding elements to matrix"]},"metadata":{"method":"log","line":41,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 1 0 0 "]},"metadata":{"method":"log","line":42,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 0 2 0 "]},"metadata":{"method":"log","line":42,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 3 0 0 "]},"metadata":{"method":"log","line":42,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 0 0 0 "]},"metadata":{"method":"log","line":42,"inline":true}},{"output_type":"execute_result","data":{"application/json":["Increment values of some edges"]},"metadata":{"method":"log","line":55,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 2 0 0 "]},"metadata":{"method":"log","line":56,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 0 3 0 "]},"metadata":{"method":"log","line":56,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 3 0 0 "]},"metadata":{"method":"log","line":56,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 0 0 0 "]},"metadata":{"method":"log","line":56,"inline":true}},{"output_type":"execute_result","data":{"application/json":["Decrement values of some edges"]},"metadata":{"method":"log","line":69,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 1 0 0 "]},"metadata":{"method":"log","line":70,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 0 2 0 "]},"metadata":{"method":"log","line":70,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 3 0 0 "]},"metadata":{"method":"log","line":70,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 0 0 0 "]},"metadata":{"method":"log","line":70,"inline":true}},{"output_type":"execute_result","data":{"application/json":["Value of edge from A --> B: 1"]},"metadata":{"method":"log","line":73,"inline":true}}]},{"cell_type":"markdown","execution_count":0,"metadata":{"collapsed":false,"continued":true,"lineCount":1},"source":"Undirected graphs are also supported by specifying the `undirected: true` parameter in the config object. The supply will automatically handle ensuring that the graph remains symmetrics about the diagonal.","outputs":[]},{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"continued":true,"lineCount":32},"source":"// create and initialize matrix\nvar undirectedAdjacencyMatrix = supply('adjacency-matrix', {\n    parameters: {\n        nodeNames: ['A', 'B', 'C', 'D'],\n        undirected: true\n    }\n});\n\nundirectedAdjacencyMatrix.$on('initialize');\n\n// add some edges\nundirectedAdjacencyMatrix({\n    from: 'A',\n    to: 'B',\n    value: 1\n});\nundirectedAdjacencyMatrix({\n    from: 'B',\n    to: 'C',\n    value: 2\n});\nundirectedAdjacencyMatrix({\n    from: 'C',\n    to: 'B',\n    value: 3\n});\n\nconsole.log('Adding elements to matrix. Notice the matrix is symmetric.');\nmatrixPrinter(undirectedAdjacencyMatrix.$on('getMatrix').adjMatrix);\n\n// get value of an edge\nconsole.log('Value of edge from C --> B: ' + undirectedAdjacencyMatrix.$on('getWeightFor', {'from': 'C', 'to': 'B'}));","outputs":[{"output_type":"execute_result","data":{"application/json":["Adding elements to matrix. Notice the matrix is symmetric."]},"metadata":{"method":"log","line":101,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 1 0 0 "]},"metadata":{"method":"log","line":102,"inline":true}},{"output_type":"execute_result","data":{"application/json":["1 0 3 0 "]},"metadata":{"method":"log","line":102,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 3 0 0 "]},"metadata":{"method":"log","line":102,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 0 0 0 "]},"metadata":{"method":"log","line":102,"inline":true}},{"output_type":"execute_result","data":{"application/json":["Value of edge from C --> B: 3"]},"metadata":{"method":"log","line":105,"inline":true}}]},{"cell_type":"markdown","execution_count":0,"metadata":{"collapsed":false,"continued":true,"lineCount":1},"source":"An adjacency matrix can also be created by passing a matrix array as a parameter to the supply.","outputs":[]},{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"continued":true,"lineCount":14},"source":"var preInitMatrix = supply('adjacency-matrix', {\n    parameters: {\n        nodeNames: ['A', 'B', 'C', 'D'],\n        initializedMatrix: [[ 0, 2, 0, 0 ],\n                            [ 0, 0, 3, 0 ],\n                            [ 0, 3, 0, 0 ],\n                            [ 0, 0, 0, 0 ]]\n    }\n});\n\npreInitMatrix.$on('initialize');\n\nconsole.log('Print out loaded, pre-initialized matrix. Note that it will be the same as the matrix above.');\nmatrixPrinter(preInitMatrix.$on('getMatrix').adjMatrix);","outputs":[{"output_type":"execute_result","data":{"application/json":["Print out loaded, pre-initialized matrix. Note that it will be the same as the matrix above."]},"metadata":{"method":"log","line":118,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 2 0 0 "]},"metadata":{"method":"log","line":119,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 0 3 0 "]},"metadata":{"method":"log","line":119,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 3 0 0 "]},"metadata":{"method":"log","line":119,"inline":true}},{"output_type":"execute_result","data":{"application/json":["0 0 0 0 "]},"metadata":{"method":"log","line":119,"inline":true}}]}],"metadata":{"version":"0.9.4","timestamp":"2017-01-19T19:47:37.844Z"}}
